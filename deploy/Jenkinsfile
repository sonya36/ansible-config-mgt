pipeline {
    agent any

    environment {
        ANSIBLE_CONFIG = "${WORKSPACE}/deploy/ansible.cfg"
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }

    stages {
        stage('Test SSH Connection') {
            steps {
                script {
                    // Test SSH connection for different hosts
                    sh 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.43.239 "echo EC2 Connection Successful"'
                    sh 'ssh -o StrictHostKeyChecking=no ubuntu@172.31.41.45 "echo Ubuntu Connection Successful"'
                }
            }
        }

        stage("Initial cleanup") {
            steps {
                dir("${WORKSPACE}") {
                    deleteDir() // Cleans up the workspace before starting the build
                }
            }
        }

        stage('Checkout SCM') {
            steps {
                script {
                    // Debugging Git repository URL and branch
                    echo "Git Repository URL: https://github.com/sonya36/ansible-config-mgt.git"
                    echo "Git Branch: main"
                    
                    // Perform git checkout and debug
                    git branch: 'main', url: 'https://github.com/sonya36/ansible-config-mgt.git'
                    
                    // Verify checkout success
                    sh 'echo "Checked out SCM successfully"'
                    sh 'ls -l'
                    sh 'cat deploy/ansible.cfg'  // Display ansible.cfg to ensure it exists
                }
            }
        }

        stage('Prepare Ansible For Execution') {
            steps {
                // Display current workspace for debugging
                sh 'echo ${WORKSPACE}'
                
                // Update or set the roles_path in ansible.cfg
                sh '''
                    # Ensure the roles_path is either added or updated
                    sed -i '/^roles_path=/d' "${WORKSPACE}/deploy/ansible.cfg"
                    echo "roles_path=${WORKSPACE}/roles" >> "${WORKSPACE}/deploy/ansible.cfg"
                '''
            }
        }

        stage('Test SSH Connections') {
            steps {
                script {
                    def hosts = [
                        [group: 'tooling', ip: '172.31.43.239', user: 'ec2-user'],
                        [group: 'tooling', ip: '172.31.35.14', user: 'ec2-user'],
                        [group: 'nginx', ip: '172.31.41.45', user: 'ubuntu'],
                        [group: 'database', ip: '172.31.33.99', user: 'ubuntu']
                    ]
                    
                    // Debug SSH private key path (only once for verification)
                    sh 'echo "Private key path:" && ls -l /var/lib/jenkins/.ssh/project_key.pem'

                    sshagent(credentials:['private-key']) {
                        for (host in hosts) {
                            try {
                                // Debug SSH connection attempt
                                echo "Testing SSH connection to ${host.user}@${host.ip}"
                                sh "ssh -o StrictHostKeyChecking=no ${host.user}@${host.ip} exit"
                            } catch (Exception e) {
                                echo "Failed to connect to ${host.user}@${host.ip}: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }

        stage('Run Ansible playbook') {
            steps {
                sshagent(['private-key']) {
                    ansiblePlaybook(
                        become: true,
                        credentialsId: 'private-key',
                        disableHostKeyChecking: true,
                        installation: 'ansible',
                        inventory: "${WORKSPACE}/inventory/dev.ini",
                        playbook: "${WORKSPACE}/playbooks/site.yml",
                    )
                }
            }
        }

        stage('Clean Workspace after build') {
            steps {
                cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true, cleanWhenUnstable: true, deleteDirs: true)
            }
        } 
    }
}

